function get(key, storageType, callback){
    let response;
    switch (storageType){
    case'localStorage':
        // eslint-disable-next-line max-len
        response = JSON.parse(localStorage.getItem(key)) || undefined;
        if (callback && response !== undefined){
            setTimeout(() => {
                callback(response);
            }, 0);
        }else {
            console.log('no such element');
        }
        return response;
    case'sessionStorage':
        // eslint-disable-next-line max-len
        response = JSON.parse(sessionStorage.getItem(key)) || undefined;
        if (callback && response !== undefined){
            setTimeout(() => {
                callback(response);
            }, 0);
        }else {
            console.log('no such element');
        }
        return response;
    case'indexedDB':
        let IDB = null;
        callback('store', 1, (db) => {
            db.createObjectStore('store');
        }).then((db) => {
            IDB = db;
            // eslint-disable-next-line max-len
            const transaction = IDB.transaction('store', 'readwrite');
            // eslint-disable-next-line max-len
            const ourStore = transaction.objectStore('store');
            const request = ourStore.get(key);
            request.onsuccess = () => {
                // eslint-disable-next-line max-len
                console.log('element #', key,'=', request.result);
            };
            request.onerror = () => {
                console.log(request.error);
            };
        });
        break;
    }
}
function getAll(storageType, callback){

    let responce;
    switch (storageType){
    case'localStorage':
        // eslint-disable-next-line max-len
        responce = localStorage || undefined;
        if (callback && responce !== undefined){
            setTimeout(() => {
                callback(responce);
            }, 0);
        } else {
            console.log('no such element');
        }
        return responce;
    case'sessionStorage':
        // eslint-disable-next-line max-len
        responce = sessionStorage|| undefined;
        if (callback && responce !== undefined){
            setTimeout(() => {
                callback(responce);
            }, 0);
        } else {
            console.log('no such element');
        }
        return responce;
    case'indexedDB':
        let IDB = null;
        callback('store', 1, (db) => {
            db.createObjectStore('store');
        }).then((db) => {
            IDB = db;
            // eslint-disable-next-line max-len
            const transaction = IDB.transaction('store', 'readwrite');
            // eslint-disable-next-line max-len
            const ourStore = transaction.objectStore('store');
            const request = ourStore.getAll();
            request.onsuccess = () => {
                // eslint-disable-next-line max-len
                console.log( request.result);
            };
            request.onerror = () => {
                console.log(request.error);
            };
        });
        break;
    }
}
function save(key, value, storageType, callback){
    let response = JSON.stringify(value) || undefined;
    switch (storageType){
    case'localStorage':
        // eslint-disable-next-line max-len
        localStorage.setItem(key, response);
        break;
    case'sessionStorage':
        sessionStorage.setItem(key, response);
        break;
    case'indexedDB':
        if(value instanceof Blob){
            const fileReader = new FileReader();
            fileReader.onload = ()=> {
                console.log('here');
                response = fileReader.readAsDataURL(value);
                console.log(response);
                // eslint-disable-next-line max-len
                storageItem.saveToIndex(key, response, callback);
            };
        }else {
            // eslint-disable-next-line max-len
            storageItem.saveToIndex(key, response, callback);
        }
        break;
    }
}
const storageItem = {
    LOCAL_STORAGE: 'localStorage',
    SESSION_STORAGE: 'sessionStorage',
    INDEXED_DB: 'indexedDB',
    save: save,
    connect: connectDb,
    get: get,
    getAll: getAll,
    saveToIndex: saveToIndex
};


function connectDb(name, version, callback){
    return new Promise((res, rej) =>{
        const request = indexedDB.open(name, version);
        request.onsuccess = () => {
            res(request.result);
        };
        request.onerror = () => {
            rej(request.error);
        };
        request.onupgradeneeded = () => {
            callback(request.result);
            res(request.result);
        };
    });
}

function saveToIndex(key, response, callback){
    let IDB = null;
    callback('store', 1, (db) => {
        db.createObjectStore('store');
    }).then((db) => {
        IDB = db;
        // eslint-disable-next-line max-len
        const transaction = IDB.transaction('store', 'readwrite');
        // eslint-disable-next-line max-len
        const ourStore = transaction.objectStore('store');
        const request = ourStore.put(key, response);
        request.onsuccess = () => {
            console.log('success');
        };
        request.onerror = () => {
            console.log(request.error);
        };
    });
}